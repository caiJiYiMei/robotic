#!/usr/bin/env python
import rospy
import copy
# the message that we get from the arduino
from std_msgs.msg import Int32

# the output message controlling the speed and direction of the robot
from geometry_msgs.msg import Twist

# the message we send for task 4 in order to make the screen shot
from std_msgs.msg import Header
from sensor_msgs.msg import LaserScan

import math
previous_angular0=0.
previous_angular1=0.
previous_angular2=0.
previous_liner=0.12
counter_li = 0
def ir_callback(data):


    # Twist is a message type in ros, here we use an Twist message to control kobuki's speed
    # twist. linear.x is the forward velocity, if it is zero, robot will be static,
    # if it is grater than 0, robot will move forward, otherwise, robot will move backward
    # twist.angular.axis is the rotatin velocity around the axis
    #
    # Around which axis do we have to turn? In wich direction will it turn with a positive value?
    # Right hand coordinate system: x forward, y left, z up

    twist = Twist()
    twist.angular.z = 0.

    # write your code down here
    twist.linear.x=0.
    # Get the decoded data:
    decoded = decode(data)
    tempcircle = add_circle(decoded[0], decoded[1])
    global previous_angular0
    global previous_angular1
    global previous_angular2
    global previous_liner
    
    
    # Check if we get a circle of data
    print(tempcircle[0])
    if tempcircle[0]:
        counter_li = 0
        # In this flow, the tempcircle is a full circle of the data
        big_sen, small_sen = tempcircle[2], tempcircle[1]
        print(big_sen)
        laser_scan(small_sen, big_sen)
        global data_li
        data_li = control(big_sen)
        #print(big_sen)
        # Task 5
        # knowing the robot appears in what period
        previous_angular0=previous_angular1
        previous_angular1=previous_angular2
        previous_angular2=data_li
        previous_liner= 0.3
        twist.linear.x=previous_liner
        twist.angular.z=data_li#(0.5*previous_angular0+previous_angular1+1.5*previous_angular2)/float(3)
    else:
        #previous_angular=previous_angular*0.99
        #twist.angular.z= data_li#(0.5*previous_angular0+previous_angular1+1.5*previous_angular2)/float(3)
        #twist.linear.x=previous_liner
        # In this flow, the tempcircle is not a full circle.
        # actually publish the twist message
    
        #print('#')
        global data_li
        # if data_li > 0.0:
        # 	data_li -= 0.0007
        # elif data_li == 0.0:
        # 	data_li = 0.0007
        # elif data_li < 0.0:
        # 	data_li += 0.0007
        global counter_li
        counter_li += 1
        print(counter_li)
        if counter_li <= 120:
            print("*")
            twist.angular.z = data_li
            twist.linear.x = 0.2
        else:
            if data_li >= 0.1:
                twist.angular.z = -0.00002
            elif data_li <= 0.1 and data_li >= -0.1:
                twist.angular.z = 0.000
            elif data_li <= -0.1:
                twist.angular.z = 0.0002
            twist.linear.x = 0.3
    print(twist.linear.x,twist.angular.z)
    kobuki_velocity_pub.publish(twist)
# This two list are to store the data is one circle,
# Remember to set the 'scale' variable in the function to determine which is the
circle_big = []
circle_small = []
start_circle = False # the first data must not be the start of a circle.
#global origitation
def control(big_sen):
    temp = []
    view = []
    obstacle_li = []
    counter = 0
    buChang = int(round(len(big_sen)/144))
    for i in range(int(len(big_sen)/2),len(big_sen)-1,buChang):
        view.append(big_sen[int(len(big_sen)/2)+buChang*counter:int(len(big_sen)/2)+buChang*(counter+1)])
        counter += 1
    sum = 0
    for j in view:
        for s in range(len(j)):
            sum += j[s]
        k = sum/float(len(j))
        sum = 0
        temp.append(k)
    #temp.reverse()
    for i in range(len(temp)):
        if i < len(temp) - 3 and abs(temp[i+2] - temp[i]) > 8:
            temp[i] = max(temp[i],temp[i+2])
    flag1 = 0
    flag2 = 0
    print(temp)
    lock1 = True
    for k in range(len(temp)):
        if k <= len(temp) - 3 and temp[k+2] - temp[k] >= 20 and lock1:
            flag1 = k + 1
            print(flag1)
            lock1 = False
        if k <= len(temp) - 3 and temp[k+2] - temp[k] <= -20:
            flag2 = k
            obstacle_li.append([flag1,flag2])
            lock1 = True
    print(obstacle_li)
    for n in range(len(obstacle_li)):
        if n < len(obstacle_li) - 2 and (obstacle_li[n+1][0] - obstacle_li[n][1]) <= 3:
            obstacle_li[n] = [obstacle_li[n][0],obstacle_li[n+1][1]]
            obstacle_li[n+1] = [0,0]
    print(obstacle_li)
    obstacle_li = [i for i in obstacle_li if i != [0,0]]
    print(obstacle_li)
    print(len(temp))
    cango = []
    if obstacle_li == []:
        cango = [[0,len(temp) - 1]]
    else:
        for m in range(len(obstacle_li)):
            if m == 0 and obstacle_li[m][0] != 0:
                cango.append([0,obstacle_li[m][0]])
            elif m == len(obstacle_li) - 1 and obstacle_li[m][1] <= len(temp) - 1:
                cango.append([obstacle_li[m][1],len(temp) - 1])
            elif m < len(obstacle_li) - 1 and obstacle_li[m+1][0] - obstacle_li[m][1] > 0:
                cango.append([obstacle_li[m][1],obstacle_li[m+1][0]])
    cango.sort(key=lambda n:n[1] - n[0])
    print(cango)
    origitation = 0.
    if (cango[len(cango) - 1][0] == 0 and (cango[len(cango) - 1][1] - cango[len(cango) - 1][0]) >= 20) or cango[len(cango) - 1][0] != 0:
        origitation = (cango[len(cango) - 1][0] + round((cango[len(cango) - 1][1] - cango[len(cango) - 1][0])/2))*math.pi/float(len(temp)) - math.pi/2
    elif len(cango) >= 2 and cango[len(cango) - 1][0] == 0 and (cango[len(cango) - 1][1] - cango[len(cango) - 1][0]) < 20:
        origitation = (cango[len(cango) - 2][0] + round((cango[len(cango) - 2][1] - cango[len(cango) - 2][0])/2))*math.pi/float(len(temp)) - math.pi/2
    print(origitation)
    return origitation
def add_circle(s_value, b_value):
    global circle_small
    global circle_big
    global start_circle
    # this function will first be called when handlng the data, and store the data in the global variable.
    # then is return a tuple with 3 elements:
    #   The 0-th element is True:
    #       the 1-st element is the circle of data of small sensor
    #       the 2-nd element is the circle of data of big sensor
    #   The 0-th element is False:
    #       the 1-st element and 2-nd element are None
    # Simple record the value read from data
    circle_big.append(b_value)
    circle_small.append(s_value)

    # Chcek if the s_value change large enough to be recognize as a circle start
    if is_circle(circle_small) and start_circle:
        # It means to return the data of a whole circle
        output_big, output_small = circle_big, circle_small
        circle_big, circle_small = [], []
        return (True, output_small, output_big)
    elif is_circle(circle_small) and not start_circle:
        # the circle has not started yet
        circle_big, circle_small = [], []
        start_circle = True
        return (False, None, None)
    else:
        return (False, None, None)

def is_circle(data):
    if not isinstance(data, list):
        print("Error: end_circle() recieved invalid input: data"); exit(0)
    # using the sacle to test if the last element of the data indicate the end of a circle
    scale = -400                       # This variable is a reference to determine if the signal from small sensor indicates the circle is over.
    i = 20                             # indicate which element you want to compare forward
    if len(data) < (i+1):
        return False
    else:
        return scale > (data[len(data)-1] - data[len(data)-1-i])



laser = LaserScan()
timecache = 0
def laser_scan(pose, value):
    global laser
    global timecache
    # in order to send the LaserScan message to let the rviz show.

    # Check if the input is valid:
    if not (isinstance(pose, list) and isinstance(value, list)):
        print("Error: in laser_scan() get invalid input"); exit(0)

    # Set the LaserScan publisher
    lspub = rospy.Publisher('/laser_scan', LaserScan, queue_size = 10)

    # set the header to setup the LaserScan
    header = Header()
    header.stamp = rospy.Time.now()
    header.frame_id = 'base_link'

    # set the LaserScan message to publish
    laser.header = header
    laser.angle_min = 0
    laser.angle_max = 2*3.14
    laser.angle_increment = (laser.angle_max-laser.angle_min)/len(pose)
    laser.scan_time = rospy.get_time() - timecache
    laser.time_increment = laser.scan_time/len(pose)
    timecache = rospy.get_time()
    laser.range_min = 150
    laser.range_max = 999
    laser.ranges = value

    # publish the message.
    lspub.publish(laser)
def decode(data):
    # This method takes in the data (whose value can be access by data attribute) and decode the data to two int32 data,
    #   which are supposed to be analogRead from the arduino.
    # It will return two integers: the first one is the position value, the second one is the infrared sensor value
    return data.data//(2**16), data.data%(2**16)


def range_controller():
    # define the publisher globally
    global kobuki_velocity_pub
    global timecache
    # initialize the node
    rospy.init_node('robot_controller', anonymous=True)
    timecache = rospy.get_time()

    # initialize the publisher - to publish Twist message on the topic below...
    kobuki_velocity_pub = rospy.Publisher('/mobile_base/commands/velocity', Twist, queue_size=10)

    # subscribe to the topic '/ir_data' of message type Int32. The function 'ir_callback' will be called
    # every time a new message is received - the parameter passed to the function is the message
    rospy.Subscriber("/ir_data", Int32, ir_callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

# start the line follow
if __name__ == '__main__':
    range_controller()



# a = [215, 216, 215, 226, 232, 230, 235, 250, 50000, 50000, 50000, 50000, 50000, 212, 194, 218, 218, 218, 220, 237, 230, 215, 219, 198, 204, 50000, 230, 230, 229, 230, 231, 230, 213, 203, 201, 200, 200, 201, 200, 199, 200, 201, 202, 201, 201, 201, 200, 201, 201, 201, 200, 201, 200, 195, 189, 189, 188, 187, 188, 189, 193, 217, 215, 207, 209, 224, 50000, 243, 230, 232, 234, 234, 238, 225, 200, 212, 227, 228, 245, 238, 224, 226, 224, 214, 213, 210, 208, 209, 211, 211, 211, 212, 212, 212, 229, 227, 227, 228, 227, 227, 226, 227, 228, 228]
# b = [961, 961, 962, 962, 962, 962, 962, 962, 962, 962, 974, 1012, 1012, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1009, 1007, 988, 988, 988, 988, 988, 989, 991, 992, 1013, 1020, 1020, 1020, 1003, 1002, 996, 984, 986, 999, 999, 999, 1000, 1000, 1003, 1003, 1004, 1005, 1004, 1004, 1020, 987, 987, 987, 971, 971, 971, 971, 971, 971, 970, 970, 970, 970, 968, 968, 968, 968, 968, 967, 988, 730, 731, 730, 709, 709, 709, 710, 709, 710, 710, 710, 711, 711, 711, 713, 729, 733, 734, 734, 731, 710, 688, 688, 688, 688, 689, 689, 689, 690, 690, 689, 688, 688, 689, 689, 689, 689, 689, 689, 689, 689, 652, 652, 653, 653, 654, 654, 655, 656, 654, 653, 653, 654, 654, 654, 654, 654, 658, 654, 655, 654, 630, 631, 629, 630, 630, 632, 633, 632, 633, 633, 632, 633, 632, 631, 632, 632, 632, 632, 633, 631, 688, 688, 688, 684, 666, 665, 665, 666, 666, 666, 666, 668, 667, 667, 666, 665, 666, 666, 666, 721, 820, 820, 820, 804, 803, 803, 803, 801, 800, 800, 800, 800, 800, 798, 797, 779, 781, 801, 800, 991, 991, 991, 992, 972, 972, 973, 972, 970, 917, 953, 955, 955, 975, 974, 974, 975, 974, 976, 972, 952, 953, 953, 953, 937, 939, 959, 959, 958, 959, 959, 956, 954, 955, 955, 955, 953, 952, 954, 953, 953, 745, 746, 745, 746, 747, 746, 746, 746, 746, 746, 746, 746, 747, 746, 746, 747, 746, 746, 746, 745, 888, 890, 890, 889, 890, 889, 890, 890, 889, 889, 889, 890, 889, 889, 891, 890, 889, 889, 890, 955, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 1021, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1020, 1019, 1020, 1020, 998, 999, 1002, 1002, 1002, 1002, 1003, 1003, 1002, 1003, 1002, 1001, 999, 983, 984, 998, 1020, 1019, 1020, 1019, 1003, 1001, 1001, 1002, 1001, 1000, 970, 983, 985, 998, 998, 998, 998, 998, 998, 1002, 1019, 953, 952, 953, 933, 913, 916, 935, 935, 935, 937, 937, 934, 934, 936, 936, 937, 935, 936, 934, 953, 956, 957, 957, 963, 963, 958, 958, 958, 959, 958, 959, 958, 957, 959, 958, 958, 959, 958, 958, 958, 991, 991, 991, 991, 991, 992, 991, 991, 992, 992, 992]
# c = [992, 991, 992, 992, 992, 992, 991, 992, 992, 999, 999, 999, 999, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1000, 1000, 1000, 999, 1000, 1000, 1020, 1020, 1020, 1020, 1021, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1018, 1016, 998, 1003, 1004, 1003, 1003, 985, 985, 985, 984, 985, 986, 985, 985, 981, 965, 966, 985, 986, 985, 987, 987, 957, 817, 816, 817, 797, 795, 794, 794, 777, 797, 798, 798, 798, 798, 798, 799, 799, 799, 795, 796, 817, 650, 650, 650, 628, 629, 628, 628, 628, 628, 629, 630, 630, 628, 627, 627, 627, 627, 628, 629, 650, 669, 670, 670, 670, 670, 670, 669, 669, 670, 670, 669, 670, 670, 670, 670, 669, 669, 669, 669, 669, 623, 620, 620, 620, 620, 619, 619, 619, 620, 620, 620, 620, 620, 621, 621, 621, 620, 619, 619, 618, 695, 696, 696, 697, 697, 696, 697, 697, 696, 696, 696, 697, 697, 698, 697, 698, 697, 696, 695, 696, 787, 787, 788, 788, 788, 789, 789, 787, 785, 782, 765, 765, 765, 766, 766, 766, 765, 767, 766, 788, 995, 995, 995, 975, 957, 960, 978, 979, 979, 979, 980, 982, 981, 981, 981, 978, 978, 977, 976, 996, 949, 949, 949, 931, 931, 932, 932, 931, 933, 931, 931, 929, 929, 930, 929, 930, 928, 909, 909, 950, 804, 804, 804, 787, 785, 784, 785, 786, 784, 784, 785, 787, 790, 809, 809, 809, 809, 810, 809, 804, 827, 828, 828, 828, 829, 829, 829, 828, 828, 829, 828, 829, 828, 828, 829, 829, 829, 829, 828, 829, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1017, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1016, 997, 996, 997, 997, 997, 998, 997, 1001, 1001, 1001, 1001, 1002, 1001, 1001, 1001, 957, 958, 957, 958, 941, 941, 941, 939, 937, 937, 938, 939, 939, 938, 938, 939, 940, 938, 937, 918, 953, 952, 953, 953, 935, 936, 934, 934, 935, 934, 935, 933, 932, 914, 916, 900, 935, 936, 935, 937, 995, 995, 995, 995, 977, 978, 979, 980, 982, 1001, 1002, 1002, 1002, 1002]
# g = [203, 214, 217, 242, 242, 245, 50000, 50000, 240, 238, 240, 204, 197, 221, 221, 221, 222, 224, 230, 235, 221, 207, 217, 243, 240, 211, 212, 213, 215, 216, 215, 214, 212, 212, 212, 212, 213, 212, 213, 212, 212, 207, 201, 201, 200, 201, 200, 200, 200, 199, 200, 197, 193, 210, 221, 220, 219, 218, 219, 221, 235, 199, 205, 230, 232, 246, 242, 229, 229, 227, 230, 227, 249, 50000, 50000, 50000, 50000, 50000, 50000, 245, 245, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]
# h = [221, 189, 193, 220, 220, 202, 188, 190, 192, 193, 192, 200, 208, 209, 209, 209, 208, 208, 207, 208, 209, 211, 213, 213, 212, 211, 212, 212, 211, 212, 211, 206, 198, 199, 213, 224, 224, 224, 223, 224, 224, 212, 189, 200, 215, 217, 231, 225, 213, 213, 215, 202, 216, 229, 241, 242, 244, 241, 243, 227, 212, 215, 217, 216, 217, 216, 217, 217, 216, 216, 216, 216, 213, 213, 212, 210, 212, 212, 212, 211, 209, 212, 206, 204, 204, 202, 204, 207, 222, 232, 230, 219, 213, 227, 50000, 234, 235, 236, 235, 239, 243, 239, 228, 240]
# k = [201, 196, 198, 199, 200, 199, 200, 201, 201, 208, 213, 212, 211, 212, 212, 213, 211, 211, 211, 209, 206, 204, 203, 203, 202, 203, 205, 203, 202, 204, 201, 229, 230, 226, 227, 228, 242, 237, 226, 200, 196, 228, 235, 220, 223, 221, 222, 224, 230, 199, 202, 224, 226, 227, 223, 197, 198, 198, 200, 221, 240, 242, 241, 240, 241, 241, 240, 240, 239, 249, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 232, 231, 233, 240, 50000, 50000, 50000, 50000, 50000, 243, 204, 217, 228, 229, 231, 235, 50000, 228, 229, 216, 50000, 50000, 50000, 50000]
# d = [192, 194, 194, 193, 192, 192, 192, 193, 192, 192, 193, 197, 202, 218, 227, 228, 228, 226, 228, 230, 243, 208, 217, 241, 244, 248, 50000, 240, 240, 242, 243, 225, 233, 50000, 50000, 50000, 50000, 50000, 50000, 228, 228, 227, 225, 224, 224, 224, 224, 225, 224, 224, 224, 213, 200, 201, 200, 200, 200, 201, 201, 199, 200, 202, 204, 205, 204, 203, 205, 221, 232, 233, 233, 219, 216, 242, 240, 240, 240, 242, 243, 247, 50000, 228, 208, 221, 238, 50000, 232, 231, 232, 235, 234, 221, 205, 203, 202, 203, 204, 203, 203, 204, 205, 205, 197, 198, 196, 196]
# m = [197, 196, 197, 197, 197, 197, 196, 196, 197, 205, 214, 213, 212, 212, 211, 213, 213, 211, 212, 211, 213, 214, 211, 212, 212, 211, 212, 215, 229, 224, 204, 217, 233, 238, 242, 227, 230, 226, 231, 216, 189, 200, 212, 212, 217, 221, 241, 213, 213, 200, 213, 226, 219, 209, 209, 210, 213, 214, 211, 214, 213, 213, 213, 213, 211, 213, 212, 212, 213, 212, 204, 205, 204, 204, 204, 204, 203, 204, 204, 204, 204, 219, 232, 232, 230, 230, 230, 236, 50000, 216, 237, 249, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 200, 213, 225, 226, 227]
# for i in range(len(b)):
# 	b[i] = 1024 - b[i]
# #print(b)
# control(m)
# def control2(big_sen):
#     #in the last half of the list, find obstacle
#     k=0
#     x=0.12
#     z=0.
#     summ=0
#     where_is_obstacle=[]
#     for _ in range(int(len(big_sen)/2),len(big_sen)-16,15):
#         k=(big_sen[_+5]-big_sen[_])
#         if k > 50:# take 50 for example
#             # There is an obstacle
#             if find_obstacle(_,big_sen) != None:
#                 where_is_obstacle.append(find_obstacle(_,big_sen))
#             else: pass
#     if len(where_is_obstacle) != 0:
#         the_distance=[]
#         for _ in where_is_obstacle:
#             the_distance.append([big_sen[_],_])
#         the_distance=sorted(the_distance,key=lambda the_distance:the_distance[0])
#         #print(the_distance[-1][1],len(big_sen))
#         if the_distance[-1][0] >400:
#         	#if there is a close obstacle
#         	x=0.5
#         	#slow down
#         if len(the_distance)==1:
#         	#the robat only sees one obstacle
#         	the_obstacle=the_distance[0][1]/float(len(big_sen))
#         	if the_obstacle < 0.75000000: z= 0.25-(0.75- the_obstacle )
#         	else: z = -0.25-(0.75- the_obstacle )
#         else:
#         	for _ in the_distance:
#         		summ+=_[0]
#         	for _ in the_distance:
#         		the_obstacle=_[1]/float(len(big_sen))
#         		if 0.75<the_obstacle<0.76:
#         			#if the obstacle is in straight ahead, we ignore it
#         			summ -= _[0]
#         		else:
#         			temp=0
#         			if the_obstacle < 0.75000000: temp= 0.25-(0.75- the_obstacle )
#         			else: temp= -0.25-(0.75- the_obstacle )
#         			z+= temp*_[0]/float(summ)
#     return [x,z]
# q1 = [995, 994, 994, 994, 1011, 948, 949, 949, 928, 910, 911, 930, 931, 931, 935, 931, 931, 931, 933, 932, 930, 930, 931, 930, 949, 1020, 1020, 1021, 1021, 1021, 1021, 1021, 1022, 1021, 1021, 1022, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1016, 1015, 1016, 1016, 1016, 1016, 1015, 1016, 1016, 1016, 1016, 1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 904, 904, 904, 905, 905, 905, 904, 905, 906, 905, 905, 905, 906, 906, 906, 905, 905, 904, 905, 904, 904, 581, 581, 582, 584, 584, 585, 583, 583, 583, 582, 582, 582, 583, 583, 582, 579, 560, 559, 558, 581, 688, 689, 688, 628, 667, 666, 667, 666, 664, 645, 647, 644, 668, 671, 668, 668, 668, 667, 667, 687, 616, 616, 616, 573, 574, 595, 595, 595, 594, 594, 593, 594, 594, 595, 595, 593, 593, 592, 593, 616, 680, 679, 680, 658, 659, 660, 660, 661, 660, 660, 658, 659, 659, 660, 660, 663, 665, 683, 684, 681, 745, 745, 745, 745, 745, 746, 746, 746, 746, 746, 745, 746, 746, 745, 745, 746, 745, 747, 746, 933, 995, 995, 995, 995, 996, 996, 995, 995, 996, 995, 995, 996, 995, 995, 995, 995, 995, 996, 996, 995, 945, 945, 944, 945, 945, 945, 945, 945, 946, 946, 947, 946, 945, 945, 944, 945, 944, 945, 946, 946, 961, 961, 960, 961, 961, 960, 959, 958, 938, 938, 938, 938, 939, 939, 939, 940, 942, 941, 942, 962, 987, 987, 987, 947, 952, 971, 972, 972, 972, 971, 974, 971, 971, 969, 969, 969, 969, 968, 968, 987, 998, 1000, 999, 982, 984, 984, 982, 983, 981, 981, 980, 979, 980, 980, 979, 980, 960, 961, 964, 999, 1016, 1016, 1015, 1000, 998, 998, 999, 999, 999, 1000, 1001, 1003, 989, 1018, 1018, 1018, 1018, 1018, 1018, 1016, 848, 848, 848, 847, 848, 848, 850, 848, 848, 848, 849, 849, 848, 848, 848, 848, 848, 848, 848, 848, 1007, 1008, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 936, 937, 937, 937, 939, 937, 937, 939, 938, 938, 938, 937, 937, 937, 938, 938, 937, 938, 938, 938, 1020, 1020, 1020, 1020, 1016, 997, 997, 997, 998, 998, 998, 998, 1002, 1002, 1002, 1002, 1002, 1002]
# q2 = [1002, 1002, 916, 916, 915, 916, 901, 902, 899, 899, 899, 900, 899, 898, 896, 898, 898, 898, 897, 895, 877, 878, 1019, 1019, 1019, 1019, 1003, 1003, 1001, 1001, 1002, 1001, 1000, 999, 982, 984, 998, 998, 998, 998, 998, 998, 1020, 1020, 1020, 1020, 1004, 1005, 1006, 1008, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 986, 973, 974, 973, 974, 973, 973, 975, 973, 974, 975, 974, 973, 973, 973, 973, 973, 973, 974, 973, 973, 541, 541, 540, 540, 541, 542, 542, 542, 542, 543, 543, 541, 541, 542, 541, 542, 543, 543, 544, 541, 703, 702, 703, 704, 705, 705, 705, 707, 706, 705, 705, 705, 704, 704, 704, 705, 705, 706, 704, 703, 615, 616, 615, 592, 593, 594, 594, 598, 595, 594, 594, 593, 592, 592, 592, 592, 591, 574, 576, 616, 669, 669, 670, 647, 646, 645, 645, 645, 645, 645, 646, 630, 648, 649, 648, 649, 648, 647, 647, 669, 672, 673, 674, 648, 631, 633, 651, 651, 652, 652, 652, 653, 652, 652, 653, 651, 650, 651, 650, 673, 998, 999, 999, 1005, 1006, 1006, 1002, 1002, 1000, 1000, 1000, 1000, 999, 999, 1000, 1000, 999, 999, 999, 999, 948, 948, 949, 949, 949, 948, 949, 950, 948, 949, 948, 949, 949, 949, 949, 949, 949, 949, 949, 950, 969, 969, 969, 969, 970, 970, 970, 969, 969, 969, 970, 970, 970, 970, 969, 969, 970, 969, 970, 971, 991, 991, 991, 991, 993, 992, 992, 992, 992, 991, 991, 991, 991, 991, 990, 988, 972, 967, 968, 968, 995, 995, 995, 995, 977, 977, 977, 977, 975, 974, 957, 957, 960, 979, 979, 979, 979, 980, 979, 981, 1015, 1016, 1016, 1016, 996, 978, 981, 995, 995, 996, 997, 996, 1001, 1001, 1001, 1001, 998, 998, 997, 997, 1016, 843, 844, 844, 825, 826, 826, 825, 824, 825, 826, 823, 824, 824, 825, 825, 825, 825, 826, 829, 1007, 1007, 1007, 1008, 1008, 1007, 1008, 1008, 1008, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 986, 925, 925, 925, 925, 925, 925, 925, 926, 924, 925, 926, 926, 926, 926, 926, 926, 926, 926, 926, 993, 1015, 1016, 1015, 1016, 1016, 1016, 1017, 1016, 1016, 1015, 1015, 1017, 1016, 1017, 1016, 1016, 1017, 1016, 1016, 1016, 904]
# q3 = [905, 905, 906, 906, 905, 905, 904, 905, 904, 902, 900, 882, 882, 881, 880, 881, 882, 883, 905, 1019, 1019, 1020, 1002, 1001, 1001, 982, 984, 998, 999, 998, 999, 999, 999, 1003, 1002, 1002, 1003, 1003, 1019, 1020, 1020, 1020, 982, 999, 999, 999, 1000, 1003, 1003, 1002, 1003, 1004, 1004, 1002, 1002, 1002, 1002, 1001, 1020, 992, 991, 991, 978, 972, 972, 973, 973, 973, 973, 974, 974, 974, 975, 976, 978, 965, 998, 998, 992, 991, 541, 541, 543, 542, 542, 541, 541, 541, 543, 542, 542, 542, 543, 542, 541, 541, 541, 541, 541, 630, 719, 719, 721, 719, 719, 720, 719, 719, 720, 719, 720, 721, 720, 720, 719, 719, 719, 720, 720, 718, 625, 624, 623, 624, 624, 624, 624, 624, 625, 625, 628, 628, 625, 624, 624, 624, 624, 624, 624, 624, 657, 657, 656, 657, 655, 639, 634, 633, 633, 634, 635, 634, 635, 636, 636, 636, 635, 634, 634, 656, 684, 684, 684, 664, 665, 666, 665, 664, 663, 663, 662, 662, 662, 663, 663, 662, 661, 642, 644, 1014, 1013, 1014, 1014, 998, 996, 996, 995, 995, 995, 994, 989, 976, 978, 993, 993, 994, 995, 995, 995, 949, 950, 950, 948, 931, 932, 934, 936, 956, 956, 955, 955, 952, 952, 952, 952, 953, 952, 950, 949, 958, 960, 960, 962, 961, 961, 961, 961, 961, 962, 962, 961, 962, 961, 961, 962, 961, 962, 962, 961, 970, 978, 978, 978, 978, 978, 978, 979, 978, 978, 978, 978, 979, 978, 978, 979, 978, 979, 979, 978, 982, 995, 995, 995, 996, 996, 996, 996, 996, 996, 996, 996, 996, 996, 997, 996, 996, 996, 996, 996, 1002, 1020, 1020, 1020, 997, 998, 998, 999, 1002, 1002, 1001, 1003, 1003, 1003, 1003, 1002, 1003, 1003, 1002, 1002, 1020, 897, 896, 896, 877, 882, 879, 879, 877, 878, 877, 876, 877, 876, 875, 857, 859, 878, 879, 880, 897, 1018, 1018, 1017, 1000, 1000, 999, 998, 974, 981, 984, 996, 997, 998, 997, 997, 998, 1001, 1001, 1001, 1018, 957, 957, 957, 942, 942, 963, 963, 964, 964, 958, 959, 959, 959, 958, 958, 958, 958, 958, 957, 957, 1011, 1011, 1011, 1011, 1011, 1011, 1012, 1011, 1011, 1012, 1011, 1012, 1011, 1012, 1012, 1011, 1012, 1012, 1011, 1012, 917, 918, 918, 917, 918]
# z1 = [998, 998, 997, 989, 978, 980, 995, 995, 997, 997, 996, 1015, 705, 704, 704, 682, 681, 680, 662, 665, 684, 684, 685, 685, 684, 682, 681, 683, 683, 682, 682, 966, 964, 965, 964, 947, 947, 947, 948, 952, 949, 949, 949, 947, 947, 946, 946, 947, 948, 948, 949, 995, 995, 995, 995, 1001, 999, 997, 997, 999, 995, 995, 996, 996, 996, 996, 995, 996, 995, 995, 996, 995, 785, 785, 784, 785, 784, 785, 785, 784, 785, 785, 785, 785, 785, 785, 784, 785, 785, 784, 785, 784, 662, 662, 660, 662, 661, 661, 662, 662, 661, 663, 663, 663, 661, 661, 661, 661, 662, 662, 662, 662, 667, 664, 663, 665, 666, 665, 665, 665, 664, 665, 667, 666, 662, 652, 642, 642, 641, 641, 643, 666, 620, 619, 619, 596, 596, 596, 594, 577, 581, 601, 599, 599, 599, 600, 600, 598, 597, 598, 598, 620, 692, 692, 692, 649, 671, 670, 671, 671, 672, 672, 671, 671, 671, 669, 671, 670, 668, 667, 649, 691, 823, 824, 824, 804, 804, 803, 803, 804, 804, 804, 805, 806, 808, 829, 829, 829, 828, 829, 827, 823, 999, 999, 999, 999, 999, 1000, 999, 1000, 1000, 1000, 1000, 1000, 999, 999, 999, 1000, 999, 1000, 1000, 999, 969, 969, 969, 969, 970, 971, 971, 971, 970, 971, 969, 970, 970, 969, 970, 970, 970, 971, 970, 970, 957, 956, 957, 957, 956, 958, 958, 958, 958, 958, 958, 957, 957, 957, 957, 958, 959, 959, 958, 957, 1007, 1007, 1007, 1007, 1007, 1004, 985, 984, 984, 984, 985, 985, 985, 989, 989, 989, 989, 988, 989, 990, 1015, 1015, 1016, 1016, 995, 997, 997, 997, 997, 1001, 1001, 1000, 998, 998, 998, 998, 998, 997, 997, 996, 1020, 1020, 1020, 1020, 1003, 1005, 1003, 1004, 1002, 1002, 1002, 1002, 1001, 1000, 983, 985, 998, 999, 999, 999, 1019, 1019, 1019, 1019, 1003, 1002, 1003, 1004, 1005, 1007, 1021, 1021, 1021, 1021, 1021, 1021, 1021, 1020, 1020, 1021, 987, 977, 977, 977, 978, 978, 977, 978, 978, 978, 978, 978, 979, 977, 977, 978, 977, 978, 977, 978, 972, 953, 953, 953, 952, 954, 954, 953, 953, 954, 955, 954, 953, 954, 954, 954, 953, 954, 953, 954, 986, 1018, 1019, 1019, 1020, 1020, 1019, 1020, 1020, 1019, 1019, 1019, 1019, 1020, 1020, 1020]
# z2 = [1020, 1019, 1020, 1020, 1019, 889, 889, 889, 885, 866, 866, 866, 867, 869, 869, 869, 868, 868, 870, 869, 869, 869, 868, 868, 889, 773, 773, 773, 752, 755, 754, 756, 756, 752, 753, 752, 752, 753, 752, 752, 751, 748, 733, 735, 773, 1017, 1018, 1017, 1001, 1001, 1000, 1000, 1000, 999, 998, 998, 981, 984, 996, 997, 997, 997, 997, 998, 1018, 925, 924, 925, 906, 908, 910, 913, 931, 931, 932, 930, 932, 931, 926, 926, 927, 926, 927, 925, 925, 925, 544, 544, 544, 544, 546, 546, 546, 547, 544, 545, 544, 545, 545, 545, 545, 546, 546, 547, 545, 583, 699, 698, 698, 700, 700, 701, 702, 700, 700, 699, 701, 700, 699, 700, 700, 702, 702, 701, 700, 698, 612, 611, 611, 613, 613, 616, 614, 613, 614, 613, 613, 613, 613, 613, 614, 616, 613, 613, 612, 613, 673, 672, 671, 649, 651, 651, 651, 652, 651, 650, 651, 652, 650, 648, 646, 631, 634, 652, 653, 673, 692, 693, 692, 669, 669, 669, 668, 666, 652, 654, 672, 673, 672, 673, 672, 672, 671, 671, 671, 999, 999, 999, 999, 963, 982, 982, 982, 982, 984, 984, 986, 982, 983, 981, 981, 981, 981, 981, 981, 971, 961, 961, 961, 967, 961, 961, 961, 961, 961, 961, 961, 961, 960, 961, 961, 962, 961, 961, 962, 962, 965, 965, 964, 964, 966, 966, 965, 964, 966, 965, 965, 967, 965, 966, 965, 965, 967, 965, 966, 976, 987, 987, 987, 987, 987, 988, 988, 988, 988, 988, 988, 988, 988, 987, 988, 988, 988, 988, 988, 994, 1013, 1013, 1013, 1014, 1014, 1014, 1014, 1014, 1013, 1014, 1013, 1013, 1014, 1013, 1012, 1011, 950, 990, 990, 1015, 1020, 1020, 1020, 1002, 1003, 1002, 1002, 1003, 1001, 1001, 983, 984, 986, 998, 999, 999, 999, 999, 1003, 1020, 1020, 1020, 1020, 1002, 1000, 1000, 986, 998, 998, 999, 999, 1000, 1003, 1003, 1003, 1003, 1003, 1004, 1002, 1020, 1018, 1017, 1017, 997, 997, 997, 997, 1001, 1001, 1001, 1001, 1002, 1001, 1001, 1001, 1001, 1001, 1002, 1003, 1018, 940, 940, 942, 946, 943, 943, 943, 942, 942, 942, 942, 941, 941, 942, 942, 942, 942, 941, 942, 941, 1015, 1016, 1015, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1019, 1019, 1020]
# z3 = [1019, 1019, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1019, 1020, 1019, 1020, 1020, 1020, 1020, 1020, 1019, 590, 590, 590, 592, 591, 592, 591, 590, 591, 589, 588, 586, 568, 568, 567, 568, 569, 568, 568, 1018, 1017, 1017, 1018, 1000, 999, 966, 981, 983, 997, 998, 998, 998, 998, 1002, 1002, 1001, 1002, 1001, 1001, 991, 991, 991, 991, 974, 975, 975, 975, 978, 973, 972, 973, 973, 973, 973, 972, 972, 973, 972, 971, 991, 548, 548, 549, 527, 526, 525, 525, 523, 525, 525, 524, 526, 527, 529, 531, 548, 548, 548, 549, 548, 719, 718, 719, 720, 720, 719, 719, 719, 720, 719, 719, 720, 719, 721, 718, 719, 719, 720, 719, 718, 627, 627, 629, 629, 628, 628, 628, 627, 627, 626, 627, 628, 629, 629, 629, 628, 628, 629, 629, 626, 651, 653, 653, 654, 654, 655, 655, 655, 655, 654, 653, 653, 654, 654, 655, 656, 655, 655, 656, 654, 710, 710, 711, 709, 706, 689, 689, 689, 689, 689, 688, 688, 689, 689, 689, 690, 691, 689, 689, 711, 995, 995, 994, 979, 978, 982, 981, 980, 980, 978, 978, 976, 976, 977, 976, 976, 975, 929, 957, 996, 970, 968, 969, 951, 952, 951, 950, 951, 950, 951, 950, 911, 930, 933, 952, 952, 952, 951, 951, 969, 966, 965, 965, 946, 947, 950, 950, 953, 972, 972, 972, 972, 971, 971, 971, 972, 969, 968, 966, 965, 965, 965, 965, 964, 966, 965, 965, 966, 965, 965, 966, 965, 965, 966, 965, 966, 965, 966, 967, 967, 1007, 1007, 1007, 1007, 1007, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1007, 1008, 1008, 1008, 1008, 1008, 1008, 1008, 1018, 1018, 1018, 1017, 1018, 1018, 1018, 1018, 1017, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1019, 1019, 997, 997, 997, 997, 997, 1001, 1001, 1001, 1001, 1002, 1001, 1001, 1001, 1001, 1001, 1001, 1020, 1020, 1020, 1020, 1003, 1003, 1003, 1004, 1002, 1002, 1002, 1002, 1002, 1001, 944, 984, 986, 999, 999, 999, 961, 961, 961, 961, 941, 943, 943, 941, 907, 923, 925, 944, 944, 944, 944, 944, 944, 948, 941, 942, 974, 973, 974, 973, 958, 960, 979, 980, 980, 979, 980, 978, 978, 975, 975, 975, 974, 975, 974, 974, 1016, 1016, 1015, 1016, 1016, 1016, 1016, 1015, 1016]

# l = [907, 909, 906, 906, 907, 906, 905, 906, 906, 925, 587, 474, 475, 475, 474, 474, 474, 474, 475, 474, 475, 475, 476, 476, 476, 475, 475, 476, 475, 865, 995, 995, 995, 996, 996, 996, 995, 996, 996, 996, 996, 995, 996, 996, 996, 996, 996, 995, 996, 991, 987, 987, 987, 987, 988, 987, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 988, 987, 792, 793, 793, 794, 794, 794, 793, 794, 793, 794, 793, 793, 790, 771, 770, 770, 769, 772, 772, 793, 662, 662, 662, 639, 639, 638, 635, 619, 622, 641, 643, 641, 641, 641, 641, 642, 641, 640, 639, 662, 664, 661, 660, 638, 639, 641, 641, 640, 641, 641, 640, 640, 639, 637, 637, 638, 637, 636, 618, 663, 652, 620, 619, 597, 597, 596, 597, 597, 597, 598, 599, 601, 603, 622, 622, 621, 620, 620, 621, 620, 654, 688, 688, 689, 689, 689, 688, 688, 688, 688, 689, 689, 689, 689, 689, 690, 689, 688, 688, 689, 831, 832, 832, 832, 833, 832, 832, 832, 832, 832, 832, 832, 833, 833, 833, 832, 832, 832, 832, 833, 991, 991, 991, 991, 991, 992, 992, 992, 992, 992, 991, 992, 992, 992, 992, 992, 992, 992, 992, 992, 954, 952, 954, 953, 929, 931, 930, 932, 932, 932, 932, 933, 934, 934, 933, 934, 934, 933, 934, 934, 969, 969, 970, 969, 954, 956, 952, 953, 950, 951, 950, 952, 952, 951, 949, 931, 933, 931, 952, 952, 1014, 1013, 1013, 1014, 995, 995, 995, 994, 992, 976, 978, 993, 993, 994, 995, 995, 995, 995, 997, 997, 1020, 1019, 1019, 1019, 1006, 1021, 1020, 1021, 1021, 1020, 1021, 1020, 1021, 1021, 1020, 1021, 1019, 1020, 1019, 1019, 1019, 1019, 1019, 1019, 1019, 1020, 1019, 1019, 1019, 1019, 1020, 1020, 1019, 1019, 1019, 1020, 1019, 1019, 1020, 1019, 1013, 1011, 1011, 1011, 1011, 1012, 1012, 1012, 1012, 1011, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1012, 1011, 1012, 953, 953, 953, 953, 954, 954, 954, 955, 954, 954, 954, 953, 955, 953, 954, 953, 953, 953, 952, 954, 957, 957, 957, 935, 939, 937, 938, 937, 938, 938, 939, 939, 938, 938, 918, 919, 917, 941, 939, 959, 904, 905, 904, 885, 885, 885, 884, 883, 865, 867]


#a = [961, 961, 962, 962, 962, 962, 962, 962, 962, 962, 974, 1012, 1012, 1011, 1011, 1011, 1011, 1011, 1011, 1010, 1009, 1007, 988, 988, 988, 988, 988, 989, 991, 992, 1013, 1020, 1020, 1020, 1003, 1002, 996, 984, 986, 999, 999, 999, 1000, 1000, 1003, 1003, 1004, 1005, 1004, 1004, 1020, 987, 987, 987, 971, 971, 971, 971, 971, 971, 970, 970, 970, 970, 968, 968, 968, 968, 968, 967, 988, 730, 731, 730, 709, 709, 709, 710, 709, 710, 710, 710, 711, 711, 711, 713, 729, 733, 734, 734, 731, 710, 688, 688, 688, 688, 689, 689, 689, 690, 690, 689, 688, 688, 689, 689, 689, 689, 689, 689, 689, 689, 652, 652, 653, 653, 654, 654, 655, 656, 654, 653, 653, 654, 654, 654, 654, 654, 658, 654, 655, 654, 630, 631, 629, 630, 630, 632, 633, 632, 633, 633, 632, 633, 632, 631, 632, 632, 632, 632, 633, 631, 688, 688, 688, 684, 666, 665, 665, 666, 666, 666, 666, 668, 667, 667, 666, 665, 666, 666, 666, 721, 820, 820, 820, 804, 803, 803, 803, 801, 800, 800, 800, 800, 800, 798, 797, 779, 781, 801, 800, 991, 991, 991, 992, 972, 972, 973, 972, 970, 917, 953, 955, 955, 975, 974, 974, 975, 974, 976, 972, 952, 953, 953, 953, 937, 939, 959, 959, 958, 959, 959, 956, 954, 955, 955, 955, 953, 952, 954, 953, 953, 745, 746, 745, 746, 747, 746, 746, 746, 746, 746, 746, 746, 747, 746, 746, 747, 746, 746, 746, 745, 888, 890, 890, 889, 890, 889, 890, 890, 889, 889, 889, 890, 889, 889, 891, 890, 889, 889, 890, 955, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 1021, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1020, 1019, 1020, 1020, 998, 999, 1002, 1002, 1002, 1002, 1003, 1003, 1002, 1003, 1002, 1001, 999, 983, 984, 998, 1020, 1019, 1020, 1019, 1003, 1001, 1001, 1002, 1001, 1000, 970, 983, 985, 998, 998, 998, 998, 998, 998, 1002, 1019, 953, 952, 953, 933, 913, 916, 935, 935, 935, 937, 937, 934, 934, 936, 936, 937, 935, 936, 934, 953, 956, 957, 957, 963, 963, 958, 958, 958, 959, 958, 959, 958, 957, 959, 958, 958, 959, 958, 958, 958, 991, 991, 991, 991, 991, 992, 991, 991, 992, 992, 992]
# # b = [992, 991, 992, 992, 992, 992, 991, 992, 992, 999, 999, 999, 999, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1000, 1001, 1000, 1000, 1000, 999, 1000, 1000, 1020, 1020, 1020, 1020, 1021, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1019, 1019, 1019, 1019, 1018, 1016, 998, 1003, 1004, 1003, 1003, 985, 985, 985, 984, 985, 986, 985, 985, 981, 965, 966, 985, 986, 985, 987, 987, 957, 817, 816, 817, 797, 795, 794, 794, 777, 797, 798, 798, 798, 798, 798, 799, 799, 799, 795, 796, 817, 650, 650, 650, 628, 629, 628, 628, 628, 628, 629, 630, 630, 628, 627, 627, 627, 627, 628, 629, 650, 669, 670, 670, 670, 670, 670, 669, 669, 670, 670, 669, 670, 670, 670, 670, 669, 669, 669, 669, 669, 623, 620, 620, 620, 620, 619, 619, 619, 620, 620, 620, 620, 620, 621, 621, 621, 620, 619, 619, 618, 695, 696, 696, 697, 697, 696, 697, 697, 696, 696, 696, 697, 697, 698, 697, 698, 697, 696, 695, 696, 787, 787, 788, 788, 788, 789, 789, 787, 785, 782, 765, 765, 765, 766, 766, 766, 765, 767, 766, 788, 995, 995, 995, 975, 957, 960, 978, 979, 979, 979, 980, 982, 981, 981, 981, 978, 978, 977, 976, 996, 949, 949, 949, 931, 931, 932, 932, 931, 933, 931, 931, 929, 929, 930, 929, 930, 928, 909, 909, 950, 804, 804, 804, 787, 785, 784, 785, 786, 784, 784, 785, 787, 790, 809, 809, 809, 809, 810, 809, 804, 827, 828, 828, 828, 829, 829, 829, 828, 828, 829, 828, 829, 828, 828, 829, 829, 829, 829, 828, 829, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1020, 1021, 1020, 1020, 1020, 1020, 1020, 1020, 1017, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1018, 1017, 1018, 1018, 1018, 1018, 1018, 1019, 1019, 1018, 1019, 1019, 1019, 1019, 1016, 997, 996, 997, 997, 997, 998, 997, 1001, 1001, 1001, 1001, 1002, 1001, 1001, 1001, 957, 958, 957, 958, 941, 941, 941, 939, 937, 937, 938, 939, 939, 938, 938, 939, 940, 938, 937, 918, 953, 952, 953, 953, 935, 936, 934, 934, 935, 934, 935, 933, 932, 914, 916, 900, 935, 936, 935, 937, 995, 995, 995, 995, 977, 978, 979, 980, 982, 1001, 1002, 1002, 1002, 1002]
#a = [240, 241, 245, 500, 239, 185, 198, 212, 217, 223, 209, 208, 209, 211, 198, 218, 215, 213, 216, 217, 217, 216, 215, 216, 217, 206, 205, 204, 204, 203, 203, 204, 204, 203, 203, 197, 197, 196, 196, 195, 196, 195, 196, 198, 199, 196, 209, 222, 223, 226, 240, 219, 222, 221, 209, 210, 235, 231, 232, 234, 234, 238, 242, 244, 221, 226, 237, 250, 246, 219, 221, 223, 225, 224, 223, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 204, 205, 204, 204, 204, 203, 203, 204, 203, 204, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]
# a = [192, 191, 192, 194, 199, 220, 220, 207, 213, 243, 50000, 236, 234, 234, 237, 240, 241, 203, 197, 221, 224, 227, 238, 239, 221, 222, 223, 198, 197, 193, 193, 195, 196, 196, 196, 196, 195, 205, 213, 213, 211, 212, 212, 212, 213, 213, 211, 210, 205, 203, 204, 204, 202, 204, 204, 204, 204, 198, 188, 217, 215, 213, 216, 220, 238, 213, 214, 200, 213, 50000, 243, 235, 234, 237, 238, 242, 50000, 230, 243, 50000, 50000, 50000, 50000, 240, 240, 241, 241, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000, 50000]
# for k in range(len(a)):
# 	#a[k] = 1024 - a[k]
# 	a[k] = 2547.8/(a[k]*0.49-10.41)-0.42
# 	a[k] = int(a[k])
# print(a)
# control(a)
# print(control2(a))
#a = [208, 233, 233, 233, 232, 232, 232, 233, 232, 231, 231, 231, 232, 232, 233, 232, 230, 231, 231, 232, 232, 209, 209, 209, 215, 234, 233, 234, 234, 232, 232, 233, 234, 235, 235, 239, 257, 253, 229, 230, 208, 209, 209, 209, 236, 242, 255, 231, 230, 229, 230, 230, 234, 234, 234, 235, 239, 257, 263, 231, 208, 213, 213, 214, 239, 238, 236, 232, 208, 208, 208, 208, 211, 212, 212, 212, 212, 212, 212, 212, 212, 242, 328, 327, 328, 328, 327, 327, 326, 325, 326, 327, 327, 327, 327, 326, 327, 326, 326, 326, 326, 250, 225, 225, 225, 225, 224, 224, 223, 222, 223, 224, 222, 223, 223, 223, 224, 226, 229, 249, 250, 214, 206, 206, 206, 229, 231, 236, 254, 250, 226, 227, 227, 225, 226, 228, 230, 229, 231, 235, 253, 205, 216, 216, 217, 242, 242, 244, 248, 265, 271, 238, 238, 238, 240, 239, 242, 241, 241, 241, 239, 216, 286, 286, 287, 284, 286, 285, 286, 285, 285, 285, 285, 286, 286, 286, 286, 285, 285, 285, 285, 286, 227, 228, 228, 228, 227, 228, 227, 227, 226, 226, 227, 227, 228, 227, 227, 227, 226, 226, 227, 227, 232, 232, 232, 231, 231, 231, 231, 233, 237, 257, 256, 256, 257, 257, 256, 256, 256, 256, 257, 232, 213, 212, 213, 235, 233, 236, 236, 236, 238, 243, 261, 258, 234, 235, 235, 234, 235, 235, 237, 212, 216, 216, 216, 238, 239, 239, 239, 240, 241, 241, 241, 239, 212, 212, 212, 212, 212, 213, 216, 216, 205, 205, 206, 205, 204, 204, 204, 204, 203, 203, 204, 204, 203, 204, 204, 205, 205, 203, 203, 204, 208, 208, 208, 208, 208, 207, 207, 207, 207, 207, 206, 207, 208, 207, 207, 206, 207, 206, 207, 207, 202, 200, 201, 200, 224, 225, 225, 224, 224, 224, 225, 226, 227, 230, 248, 254, 222, 220, 223, 223, 201, 212, 212, 212, 259, 234, 233, 234, 232, 235, 235, 235, 237, 238, 243, 260, 261, 234, 234, 235, 212, 201, 201, 200, 224, 220, 196, 196, 198, 198, 198, 198, 200, 200, 200, 199, 200, 200, 201, 200, 201, 212, 212, 213, 211, 211, 211, 212, 213, 212, 212, 211, 211, 212, 211, 211, 211]
#control(a)
